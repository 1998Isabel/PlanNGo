type Query {
  items(id: String!): [Item]!
  users(id: String!): Users!
  days: [Day!]!
  loginMatch(id: String!): String
}

type Mutation {
  createUser(data: CreateUserInput!): String
  createItem(userid: String!, id: String!, data: CreateItemInput!): Item!
  updateDnDItem(userid: String!, data: UpdateDnDItemInput!): [Day]!
  updateItemInfo(userid: String!, data: UpdateItemInfo!): Item!
  deleteItem(userid: String!, data: DeleteItemInput!): Users
  updateDate(userid: String!, days: [String]!): Users
}

type Subscription {
  item(userid: String!): ItemSubscriptionPayload!
  iteminfo(userid: String!): ItemInfoSubscriptionPayload!
  mapitem(userid: String!): MapItemSubscriptionPayload!
}
type Users {
  projectName: String!
  totalDays: [String!]
  items: [Item]
  name: String!
  firstDay: String!
  days: [Day!]
}
type Day {
  id: String
  itemsid: [String]
  items(id: String!): [Item]!
}

type Place {
  description: String
  placeid: String
  name: String
  type: String
  duration: Int
  photo: String
  price: Int
  location: [Float]
}

type Item { 
  id: String
  place: Place
}

input PlaceInput {
  description: String
  placeid: String
  name: String
  type: String
  photo: String
  price: Int
  location: [Float]
  duration: Int
}

input CreateUserInput {
  hash: String!
  projectName: String!
  totalDays: [String]!
}

input CreateItemInput {
  id: String!
  place: PlaceInput
}

input UpdateDnDItemInput {
  draggableId: String
  destination_droppableId: String
  destination_index: Int
  source_droppableId: String
  source_index: Int
}

input UpdateItemInfo {
  itemId: String!
  description: String
  price: Int
  duration: Int
}

input DeleteItemInput {
  itemId: String!
  columnId: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  data: [Day]!
}
type ItemInfoSubscriptionPayload {
  mutation: MutationType!
  data: Item!
}
type MapItemSubscriptionPayload {
  mutation: MutationType!
  data: Item!
}