type Query {
  items(id: String!): [Item!]!
  users(id: String!): Users!
  days: [Day!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
  post: Post!
  loginMatch(id: String!): String
}

type Mutation {
  createItem(userid: String!, id: String!, data: CreateItemInput!): Item!
  updateDnDItem(data: UpdateDnDItemInput!): [Day]!
  deleteItem(data: DeleteItemInput!): Users!
  createUser(data: CreateUserInput!): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
  item: ItemSubscriptionPayload!
  mapitem: MapItemSubscriptionPayload!
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}
type Users {
  totalDays: [String!]
  items: [Item]
  # name: String!
  token: String!
  days: [Day!]
}
type Day {
  id: String
  itemsid: [String]
  items(id: String!): [Item]!
}

type Place {
  description: String
  placeid: String
  name: String
  type: String
  duration: Int
  photo: String
  price: Int
  location: [Float]
}

type Item { 
  id: String
  place: Place
}

input PlaceInput {
  description: String
  placeid: String
  name: String
  type: String
  photo: String
  price: Int
  location: [Float]
}

input CreateItemInput {
  id: String!
  place: PlaceInput
}

input UpdateDnDItemInput {
  draggableId: String
  destination_droppableId: String
  destination_index: Int
  source_droppableId: String
  source_index: Int
}
input DeleteItemInput {
  itemId: String!
  columnId: String!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}
type ItemSubscriptionPayload {
  mutation: MutationType!
  data: [Day]!
}
type MapItemSubscriptionPayload {
  mutation: MutationType!
  data: Item!
}