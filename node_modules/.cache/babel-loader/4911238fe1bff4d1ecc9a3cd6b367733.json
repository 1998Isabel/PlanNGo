{"ast":null,"code":"var _jsxFileName = \"/Users/isabel/Desktop/PlanNGo/src/containers/map/Search.js\";\nimport React, { Component } from 'react';\nimport './Map.css';\nimport styled from 'styled-components';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DirectionsIcon from '@material-ui/icons/Directions';\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPlaceChanged = ({\n      map,\n      addplace\n    } = this.props) => {\n      const place = this.autoComplete.getPlace();\n      if (!place.geometry) return;\n\n      if (place.geometry.viewport) {\n        map.fitBounds(place.geometry.viewport);\n      } else {\n        map.setCenter(place.geometry.location);\n        map.setZoom(17);\n      }\n\n      addplace(place);\n      this.searchInput.blur();\n    };\n\n    this.clearSearchBox = this.clearSearchBox.bind(this);\n  }\n\n  componentDidMount({\n    map,\n    mapApi\n  } = this.props) {\n    const options = {// restrict your search to a specific type of result\n      // types: ['geocode', 'address', 'establishment', '(regions)', '(cities)'],\n      // restrict your search to a specific country, or an array of countries\n      // componentRestrictions: { country: ['gb', 'us'] },\n    };\n    this.autoComplete = new mapApi.places.Autocomplete(this.searchInput, options);\n    this.autoComplete.addListener('place_changed', this.onPlaceChanged);\n    this.autoComplete.bindTo('bounds', map);\n  }\n\n  componentWillUnmount({\n    mapApi\n  } = this.props) {\n    mapApi.event.clearInstanceListeners(this.searchInput);\n  }\n\n  clearSearchBox() {\n    this.searchInput.value = '';\n  }\n\n  render() {\n    return React.createElement(Paper, {\n      className: \"search-root\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: \"search-iconButton\",\n      \"aria-label\": \"Menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(InputBase, {\n      inputRef: ref => {\n        this.searchInput = ref;\n      },\n      type: \"text\",\n      onFocus: this.clearSearchBox,\n      className: \"search-input\",\n      placeholder: \"Search Google Maps\",\n      inputProps: {\n        'aria-label': 'Search Google Maps'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(IconButton, {\n      className: \"search-iconButton\",\n      \"aria-label\": \"Search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(SearchIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/isabel/Desktop/PlanNGo/src/containers/map/Search.js"],"names":["React","Component","styled","makeStyles","Paper","InputBase","Divider","IconButton","MenuIcon","SearchIcon","DirectionsIcon","Search","constructor","props","onPlaceChanged","map","addplace","place","autoComplete","getPlace","geometry","viewport","fitBounds","setCenter","location","setZoom","searchInput","blur","clearSearchBox","bind","componentDidMount","mapApi","options","places","Autocomplete","addListener","bindTo","componentWillUnmount","event","clearInstanceListeners","value","render","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Map.css'\nimport styled from 'styled-components';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DirectionsIcon from '@material-ui/icons/Directions';\n\nclass Search extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.clearSearchBox = this.clearSearchBox.bind(this);\n\t}\n\n\tcomponentDidMount({ map, mapApi } = this.props) {\n\t\tconst options = {\n\t\t\t// restrict your search to a specific type of result\n\t\t\t// types: ['geocode', 'address', 'establishment', '(regions)', '(cities)'],\n\t\t\t// restrict your search to a specific country, or an array of countries\n\t\t\t// componentRestrictions: { country: ['gb', 'us'] },\n\t\t};\n\t\tthis.autoComplete = new mapApi.places.Autocomplete(\n\t\t\tthis.searchInput,\n\t\t\toptions,\n\t\t);\n\t\tthis.autoComplete.addListener('place_changed', this.onPlaceChanged);\n\t\tthis.autoComplete.bindTo('bounds', map);\n\t}\n\n\tcomponentWillUnmount({ mapApi } = this.props) {\n\t\tmapApi.event.clearInstanceListeners(this.searchInput);\n\t}\n\n\tonPlaceChanged = ({ map, addplace } = this.props) => {\n\t\tconst place = this.autoComplete.getPlace();\n\n\t\tif (!place.geometry) return;\n\t\tif (place.geometry.viewport) {\n\t\t\tmap.fitBounds(place.geometry.viewport);\n\t\t} else {\n\t\t\tmap.setCenter(place.geometry.location);\n\t\t\tmap.setZoom(17);\n\t\t}\n\n\t\taddplace(place);\n\t\tthis.searchInput.blur();\n\t};\n\n\tclearSearchBox() {\n\t\tthis.searchInput.value = '';\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Paper className=\"search-root\">\n\t\t\t\t<IconButton className=\"search-iconButton\" aria-label=\"Menu\">\n\t\t\t\t\t<MenuIcon />\n\t\t\t\t</IconButton>\n\t\t\t\t<InputBase\n\t\t\t\t\tinputRef={(ref) => {\n\t\t\t\t\t\tthis.searchInput = ref;\n\t\t\t\t\t}}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tonFocus={this.clearSearchBox}\n\t\t\t\t\tclassName=\"search-input\"\n\t\t\t\t\tplaceholder=\"Search Google Maps\"\n\t\t\t\t\tinputProps={{ 'aria-label': 'Search Google Maps' }}\n\t\t\t\t/>\n\t\t\t\t<IconButton className=\"search-iconButton\" aria-label=\"Search\">\n\t\t\t\t\t<SearchIcon />\n\t\t\t\t</IconButton>\n\t\t\t</Paper>\n\t\t);\n\t}\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}