{"ast":null,"code":"var _jsxFileName = \"/Users/isabel/Desktop/PlanNGo/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // Create an http link:\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/'\n}); // Create a WebSocket link:\n\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:4000/\",\n  options: {\n    reconnect: true\n  }\n}); // using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\n\nconst link = split( // split based on operation type\n({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({})\n});\nconst wrappedApp = React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}))));\nReactDOM.render(wrappedApp, document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/isabel/Desktop/PlanNGo/src/index.js"],"names":["React","ReactDOM","BrowserRouter","Switch","ApolloClient","InMemoryCache","ApolloProvider","split","HttpLink","WebSocketLink","getMainDefinition","App","serviceWorker","httpLink","uri","wsLink","options","reconnect","link","query","definition","kind","operation","client","cache","restore","wrappedApp","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,kBAAtC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CACA;;AACA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC1BM,EAAAA,GAAG,EAAE;AADqB,CAAb,CAAjB,C,CAIE;;AACA,MAAMC,MAAM,GAAG,IAAIN,aAAJ,CAAkB;AAC/BK,EAAAA,GAAG,wBAD4B;AAE/BE,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAFsB,CAAlB,CAAf,C,CAKA;AACA;;AACA,MAAMC,IAAI,GAAGX,KAAK,EAChB;AACA,CAAC;AAAEY,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGV,iBAAiB,CAACS,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CARe,EAShBP,MATgB,EAUhBF,QAVgB,CAAlB;AAaA,MAAMU,MAAM,GAAG,IAAInB,YAAJ,CAAiB;AAC9Bc,EAAAA,IAD8B;AAE/BM,EAAAA,KAAK,EAAE,IAAInB,aAAJ,GAAoBoB,OAApB,CAA4B,EAA5B;AAFwB,CAAjB,CAAf;AAKA,MAAMC,UAAU,GACd,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADF,CADF,CADF;AAUFtB,QAAQ,CAAC0B,MAAT,CAAgBD,UAAhB,EAA4BE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B,E,CACA;AACA;AACA;;AACAjB,aAAa,CAACkB,UAAd","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter, Switch } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache } from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport { split } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// Create an http link:\nconst httpLink = new HttpLink({\n    uri: 'http://localhost:4000/'\n  })\n  \n  // Create a WebSocket link:\n  const wsLink = new WebSocketLink({\n    uri: `ws://localhost:4000/`,\n    options: { reconnect: true }\n  })\n  \n  // using the ability to split links, you can send data to each link\n  // depending on what kind of operation is being sent\n  const link = split(\n    // split based on operation type\n    ({ query }) => {\n      const definition = getMainDefinition(query)\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      )\n    },\n    wsLink,\n    httpLink\n  )\n  \n  const client = new ApolloClient({\n    link,\n   cache: new InMemoryCache().restore({})\n  })\n  \n  const wrappedApp = (\n    <BrowserRouter>\n      <Switch>\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n      </Switch>\n    </BrowserRouter>\n)\n\nReactDOM.render(wrappedApp, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}