{"ast":null,"code":"var _jsxFileName = \"/Users/isabel/Desktop/PlanNGo/src/containers/map/Map.js\";\nimport React, { Component, Fragment } from 'react';\nimport isEmpty from 'lodash.isempty';\nimport socketIOClient from \"socket.io-client\"; // components:\n// import Marker from './Marker';\n\nimport MarkerInfo from './MarkerInfo'; // examples:\n\nimport GoogleMap from './GoogleMap';\nimport Search from './Search';\nimport { withApollo } from 'react-apollo';\nimport { MAP_ITEMS, MAPITEM_SUBSCRIPTION, ROUTE_ITEMS } from '../../graphql'; // consts\n\nconst TAIPEI_NTU_CENTER = [25.021918, 121.535285];\nvar markers = [];\nvar dir_markers = [];\nvar dir_infowindows = [];\nvar directions = [];\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.apiHasLoaded = (map, maps, places) => {\n      this.setState({\n        mapApiLoaded: true,\n        mapInstance: map,\n        mapApi: maps\n      });\n\n      if (this.state.places.length > 0) {\n        map.setCenter(new maps.LatLng(this.state.places[0].geometry.location.lat(), this.state.places[0].geometry.location.lng()));\n      }\n    };\n\n    this.addPlaceFromQuery = place => {\n      const _this$state = this.state,\n            places = _this$state.places,\n            markers = _this$state.markers;\n      let findplace = places.findIndex(ele => {\n        return ele.place_id === place.place_id && ele.fromSearch;\n      });\n\n      if (findplace === -1) {\n        place.show = true;\n        places.push(place);\n      } else {\n        console.log(\"Remove from search: \", findplace);\n        places.splice(findplace, 1);\n        place.show = false;\n        console.log(place);\n        places.push(place);\n      }\n\n      this.setState({\n        places: places\n      });\n    };\n\n    this.addPlace = place => {\n      const places = this.state.places;\n      let findplace = places.findIndex(ele => {\n        return ele.place_id === place.place_id;\n      });\n\n      if (findplace === -1) {\n        place.show = true;\n        place.fromSearch = true;\n        places.push(place);\n      } else {\n        console.log(\"find exist: \", findplace);\n        places[findplace].show = true;\n      }\n\n      this.setState({\n        places: places\n      });\n    };\n\n    this.onChildClickCallback = key => {\n      this.setState(state => {\n        // console.log(state)\n        const index = state.places.findIndex(e => e.id === key); // console.log(index)\n        // console.log(index)\n\n        if (index < 0) {\n          return;\n        }\n\n        this.state.mapInstance.setCenter(new this.state.mapApi.LatLng(state.places[index].geometry.location.lat(), state.places[index].geometry.location.lng()));\n        this.state.mapInstance.setZoom(15);\n        state.places[index].show = !state.places[index].show; // eslint-disable-line no-param-reassign\n\n        return {\n          places: state.places\n        };\n      });\n    };\n\n    this.sendDirectInfo = details => {\n      console.log(\"EMIT DETAILS\", details);\n      this.props.socket.emit(\"setRouteDetail\", details);\n    };\n\n    this.showMarker = places => {\n      const _this$state2 = this.state,\n            mapInstance = _this$state2.mapInstance,\n            mapApi = _this$state2.mapApi;\n      if (!(mapApi && mapInstance)) return; // clear marker\n\n      markers.forEach(mark => {\n        mark.setMap(null);\n      });\n      markers = [];\n      console.log(\"MAP\", places);\n      places.forEach(place => {\n        markers.push(new mapApi.Marker({\n          map: mapInstance,\n          position: {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng()\n          }\n        }));\n      });\n      markers.forEach((marker, i) => {\n        marker.addListener('click', () => {\n          console.log(\"Click\", i);\n          this.setState(state => {\n            console.log(\"In Click\", state.places);\n            state.mapInstance.setCenter(new mapApi.LatLng(state.places[i].geometry.location.lat(), state.places[i].geometry.location.lng()));\n            state.mapInstance.setZoom(15);\n            state.places[i].show = !state.places[i].show; // eslint-disable-line no-param-reassign\n\n            return {\n              places: state.places\n            };\n          });\n        });\n      });\n    };\n\n    this.resetDirection = () => {\n      directions.forEach(dir => {\n        dir.setMap(null);\n      });\n      directions = [];\n      dir_markers.forEach(dir => {\n        dir.setMap(null);\n      });\n      dir_markers = [];\n      dir_infowindows.forEach(dir => {\n        dir.setMap(null);\n      });\n      dir_infowindows = [];\n    };\n\n    this.pickcenter = place => {\n      if (place) {\n        console.log(\"NEW PLACE\");\n        return [place.geometry.location.lat(), place.geometry.location.lng()];\n      } else {\n        console.log(\"OLD PLACE\");\n        return TAIPEI_NTU_CENTER;\n      }\n    };\n\n    this.state = {\n      mapApiLoaded: false,\n      mapInstance: null,\n      mapApi: null,\n      places: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.client.query({\n      fetchPolicy: 'network-only',\n      query: MAP_ITEMS,\n      variables: {\n        userID: this.props.user\n      }\n    }).then(result => {\n      this.resetDirection();\n      const queryplaces = result.data.items.map(item => {\n        function lat() {\n          return item.place.location[0];\n        }\n\n        ;\n\n        function lng() {\n          return item.place.location[1];\n        }\n\n        ;\n        console.log(item.place.type);\n        const place = {\n          id: item.id,\n          name: item.place.name,\n          geometry: {\n            location: {\n              lat,\n              lng\n            }\n          },\n          show: false,\n          place_id: item.place.placeid,\n          types: [item.place.description],\n          price_level: item.place.price,\n          spottype: item.place.type // console.log(place.types)\n\n        };\n        return place;\n      }); // console.log(\"Query places in map\", queryplaces)\n\n      this.setState({\n        places: queryplaces\n      });\n\n      if (queryplaces.length > 0 && this.state.mapApiLoaded) {\n        this.state.mapInstance.setCenter(new this.state.mapApi.LatLng(queryplaces[0].geometry.location.lat(), queryplaces[0].geometry.location.lng()));\n      } // console.log(\"query: \",this.state.places)\n\n    });\n    this.props.client.subscribe({\n      query: MAPITEM_SUBSCRIPTION,\n      variables: {\n        userid: this.props.user\n      }\n    }).subscribe(response => {\n      let subplace = response.data.mapitem.data;\n\n      if (response.data.mapitem.mutation === \"CREATED\") {\n        function lat() {\n          return subplace.place.location[0];\n        }\n\n        ;\n\n        function lng() {\n          return subplace.place.location[1];\n        }\n\n        ;\n        const place = {\n          id: subplace.id,\n          name: subplace.place.name,\n          geometry: {\n            location: {\n              lat,\n              lng\n            }\n          },\n          show: true,\n          place_id: subplace.place.placeid,\n          types: [subplace.place.description],\n          price_level: subplace.place.price,\n          spottype: subplace.place.type\n        };\n        this.addPlaceFromQuery(place);\n      } else {\n        this.resetDirection();\n        const places = this.state.places;\n        const delindex = places.findIndex(ele => ele.id === subplace.id);\n        places.splice(delindex, 1);\n        this.setState({\n          places: places\n        });\n      }\n    });\n    this.props.socket.on(\"placeclick\", data => {\n      console.log(\"Card_Click\", data);\n      const places = this.state.places;\n      const index = places.findIndex(ele => {\n        return ele.id === data;\n      });\n      places[index].show = true;\n      this.setState({\n        places: places\n      });\n      this.state.mapInstance.setCenter(new this.state.mapApi.LatLng(places[index].geometry.location.lat(), places[index].geometry.location.lng()));\n      this.state.mapInstance.setZoom(15); // this.setState({center: places[index].geometry.location})\n    });\n    this.props.socket.on(\"routeMap\", data => {\n      console.log(\"DAY id\", data);\n      let map = this.state.mapInstance;\n      let maps = this.state.mapApi;\n      let places = this.state.places;\n      this.props.client.query({\n        fetchPolicy: 'network-only',\n        query: ROUTE_ITEMS,\n        variables: {\n          userID: this.props.user,\n          dayID: data\n        }\n      }).then(result => {\n        console.log(\"ROUTE ITEMS\", result);\n        const day = result.data.days;\n        console.log(\"ROUTE DAY\", day.id);\n        const dayroute = [];\n        day.itemsid.forEach((itemid, j) => {\n          dayroute.push(places.find(ele => ele.id === itemid));\n        });\n\n        if (dayroute.length > 1) {\n          let details = [];\n          let count = 0;\n\n          for (let i = 1; i < dayroute.length; i++) {\n            console.log(\"ROUTE\", i);\n            let directionsService = new maps.DirectionsService();\n            let directionsDisplay = new maps.DirectionsRenderer({\n              suppressMarkers: true\n            });\n            directions.push(directionsDisplay);\n            directionsDisplay.setMap(map);\n            const origin = {\n              lat: dayroute[i - 1].geometry.location.lat(),\n              lng: dayroute[i - 1].geometry.location.lng()\n            };\n            const destination = {\n              lat: dayroute[i].geometry.location.lat(),\n              lng: dayroute[i].geometry.location.lng()\n            };\n            directionsService.route({\n              origin: origin,\n              destination: destination,\n              travelMode: 'TRANSIT'\n            }, (response, status) => {\n              // console.log(response.routes)\n              if (status === 'OK') {\n                console.log(i, status);\n                count += 1;\n                const detail = {\n                  id: day.itemsid[i - 1],\n                  distance: response.routes[0].legs[0].distance.text,\n                  duration: response.routes[0].legs[0].duration.text\n                };\n                details.push(detail);\n                console.log(\"SHOW EACH\", i, details);\n\n                if (count === dayroute.length - 1) {\n                  console.log(\"DETAILS INSIDE\", details);\n                  this.sendDirectInfo({\n                    id: day.id,\n                    details: details\n                  });\n                }\n\n                const steps = response.routes[0].legs[0].steps;\n                const len = dir_markers.length;\n                steps.forEach((e, i) => {\n                  const idx = i + len; // 加入地圖標記\n\n                  dir_markers.push(new maps.Marker({\n                    position: {\n                      lat: e.start_location.lat(),\n                      lng: e.start_location.lng()\n                    },\n                    map: map,\n                    label: {\n                      text: idx + '',\n                      color: \"#fff\"\n                    }\n                  })); // 加入資訊視窗\n\n                  dir_infowindows.push(new maps.InfoWindow({\n                    content: e.instructions\n                  })); // console.log(dir_markers.length, dir_infowindows.length, idx);\n                  // 加入地圖標記點擊事件\n\n                  dir_markers[idx].addListener('click', function () {\n                    if (dir_infowindows[idx].anchor) {\n                      dir_infowindows[idx].close();\n                    } else {\n                      dir_infowindows[idx].open(map, dir_markers[idx]);\n                    }\n                  });\n                }); // console.log(\"Steps\", steps);\n\n                directionsDisplay.setDirections(response);\n              } else {\n                window.alert('Directions request failed due to ' + status);\n              }\n            });\n          }\n        }\n      });\n    });\n    this.props.socket.on(\"resetDirect\", data => {\n      console.log(\"Reset Route\", data);\n      this.resetDirection();\n      this.sendDirectInfo(null);\n    });\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          places = _this$state3.places,\n          mapApiLoaded = _this$state3.mapApiLoaded,\n          mapInstance = _this$state3.mapInstance,\n          mapApi = _this$state3.mapApi; // this.showMarker(places, mapInstance, mapApi)\n\n    return React.createElement(\"div\", {\n      id: \"right_map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, mapApiLoaded && React.createElement(Search, {\n      map: mapInstance,\n      mapApi: mapApi,\n      addplace: this.addPlace,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(GoogleMap, {\n      defaultZoom: 12,\n      defaultCenter: this.pickcenter(places[0]),\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_MAP_KEY,\n        libraries: ['places', 'geometry']\n      } // onChildClick={this.onChildClickCallback}\n      ,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => this.apiHasLoaded(map, maps, places),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, this.showMarker(places), !isEmpty(places) && places.map(place => React.createElement(MarkerInfo, {\n      key: place.id,\n      lat: place.geometry.location.lat(),\n      lng: place.geometry.location.lng(),\n      show: place.show,\n      place: place,\n      user: this.props.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withApollo(Map);","map":{"version":3,"sources":["/Users/isabel/Desktop/PlanNGo/src/containers/map/Map.js"],"names":["React","Component","Fragment","isEmpty","socketIOClient","MarkerInfo","GoogleMap","Search","withApollo","MAP_ITEMS","MAPITEM_SUBSCRIPTION","ROUTE_ITEMS","TAIPEI_NTU_CENTER","markers","dir_markers","dir_infowindows","directions","Map","constructor","props","apiHasLoaded","map","maps","places","setState","mapApiLoaded","mapInstance","mapApi","state","length","setCenter","LatLng","geometry","location","lat","lng","addPlaceFromQuery","place","findplace","findIndex","ele","place_id","fromSearch","show","push","console","log","splice","addPlace","onChildClickCallback","key","index","e","id","setZoom","sendDirectInfo","details","socket","emit","showMarker","forEach","mark","setMap","Marker","position","marker","i","addListener","resetDirection","dir","pickcenter","componentDidMount","client","query","fetchPolicy","variables","userID","user","then","result","queryplaces","data","items","item","type","name","placeid","types","description","price_level","price","spottype","subscribe","userid","response","subplace","mapitem","mutation","delindex","on","dayID","day","days","dayroute","itemsid","itemid","j","find","count","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","suppressMarkers","origin","destination","route","travelMode","status","detail","distance","routes","legs","text","duration","steps","len","idx","start_location","label","color","InfoWindow","content","instructions","anchor","close","open","setDirections","window","alert","render","process","env","REACT_APP_MAP_KEY","libraries"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport isEmpty from 'lodash.isempty';\nimport socketIOClient from \"socket.io-client\";\n\n// components:\n// import Marker from './Marker';\nimport MarkerInfo from './MarkerInfo'\n\n// examples:\nimport GoogleMap from './GoogleMap';\nimport Search from './Search';\nimport { withApollo } from 'react-apollo';\nimport { MAP_ITEMS, MAPITEM_SUBSCRIPTION, ROUTE_ITEMS } from '../../graphql';\n\n// consts\nconst TAIPEI_NTU_CENTER = [25.021918, 121.535285];\n\nvar markers = [];\nvar dir_markers = [];\nvar dir_infowindows = [];\nvar directions = [];\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapApiLoaded: false,\n      mapInstance: null,\n      mapApi: null,\n      places: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.client.query({ fetchPolicy: 'network-only', query: MAP_ITEMS, variables: { userID: this.props.user } }).then(result => {\n      this.resetDirection()\n      const queryplaces = result.data.items.map(item => {\n        function lat() { return item.place.location[0] };\n        function lng() { return item.place.location[1] };\n        console.log(item.place.type)\n        const place = {\n          id: item.id,\n          name: item.place.name,\n          geometry: { location: { lat, lng } },\n          show: false,\n          place_id: item.place.placeid,\n          types: [item.place.description],\n          price_level: item.place.price,\n          spottype: item.place.type,\n        }\n        // console.log(place.types)\n        return place\n      })\n      // console.log(\"Query places in map\", queryplaces)\n      this.setState({places: queryplaces})\n      if(queryplaces.length > 0 && this.state.mapApiLoaded){\n        this.state.mapInstance.setCenter(new this.state.mapApi.LatLng(queryplaces[0].geometry.location.lat(), queryplaces[0].geometry.location.lng()));\n      }\n        // console.log(\"query: \",this.state.places)\n    })\n    this.props.client.subscribe({\n      query: MAPITEM_SUBSCRIPTION,\n      variables: { userid: this.props.user },\n    }).subscribe(response => {\n      let subplace = response.data.mapitem.data;\n      if (response.data.mapitem.mutation === \"CREATED\") {\n        function lat() { return subplace.place.location[0] };\n        function lng() { return subplace.place.location[1] };\n        const place = {\n          id: subplace.id,\n          name: subplace.place.name,\n          geometry: { location: { lat, lng } },\n          show: true,\n          place_id: subplace.place.placeid,\n          types: [subplace.place.description],\n          price_level: subplace.place.price,\n          spottype: subplace.place.type,\n        }\n        this.addPlaceFromQuery(place);\n      }\n      else {\n        this.resetDirection()\n        const { places } = this.state;\n        const delindex = places.findIndex(ele => ele.id === subplace.id)\n        places.splice(delindex, 1);\n        this.setState({ places: places });\n      }\n    })\n\n    this.props.socket.on(\"placeclick\", (data) => {\n      console.log(\"Card_Click\", data)\n      const places = this.state.places\n      const index = places.findIndex(ele => {\n        return ele.id === data\n      })\n      places[index].show = true\n      this.setState({ places: places })\n      this.state.mapInstance.setCenter(new this.state.mapApi.LatLng(places[index].geometry.location.lat(), places[index].geometry.location.lng()));\n      this.state.mapInstance.setZoom(15);\n      // this.setState({center: places[index].geometry.location})\n    })\n\n    this.props.socket.on(\"routeMap\", (data) => {\n      console.log(\"DAY id\", data)\n      let map = this.state.mapInstance;\n      let maps = this.state.mapApi;\n      let places = this.state.places;\n\n      this.props.client.query({ fetchPolicy: 'network-only', query: ROUTE_ITEMS, variables: { userID: this.props.user, dayID: data } }).then(result => {\n        console.log(\"ROUTE ITEMS\", result)\n        const day = result.data.days\n        console.log(\"ROUTE DAY\", day.id)\n        const dayroute = []\n        day.itemsid.forEach((itemid, j) => {\n          dayroute.push(places.find(ele => (ele.id === itemid)))\n        })\n        if (dayroute.length > 1) {\n          let details = [];\n          let count = 0;\n          for (let i = 1; i < dayroute.length; i++) {\n            console.log(\"ROUTE\", i)\n            let directionsService = new maps.DirectionsService();\n            let directionsDisplay = new maps.DirectionsRenderer({\n              suppressMarkers: true\n            });\n            directions.push(directionsDisplay)\n            directionsDisplay.setMap(map)\n            const origin = {\n              lat: dayroute[i - 1].geometry.location.lat(),\n              lng: dayroute[i - 1].geometry.location.lng(),\n            };\n            const destination = {\n              lat: dayroute[i].geometry.location.lat(),\n              lng: dayroute[i].geometry.location.lng(),\n            };\n            directionsService.route(\n              {\n                origin: origin,\n                destination: destination,\n                travelMode: 'TRANSIT'\n              },\n              (response, status) => {\n                // console.log(response.routes)\n                if (status === 'OK') {\n                  console.log(i, status)\n                  count += 1;\n                  const detail = {\n                    id: day.itemsid[i-1],\n                    distance: response.routes[0].legs[0].distance.text,\n                    duration: response.routes[0].legs[0].duration.text,\n                  }\n                  details.push(detail)\n                  console.log(\"SHOW EACH\", i, details )\n                  if (count === dayroute.length-1 ){\n                    console.log(\"DETAILS INSIDE\", details)\n                    this.sendDirectInfo({\n                      id: day.id,\n                      details: details\n                    })\n                  }\n                  const steps = response.routes[0].legs[0].steps;\n                  const len = dir_markers.length;\n                  steps.forEach((e, i) => {\n                    const idx = i + len\n\n                    // 加入地圖標記\n                    dir_markers.push(new maps.Marker({\n                      position: { lat: e.start_location.lat(), lng: e.start_location.lng() },\n                      map: map,\n                      label: { text: idx + '', color: \"#fff\" }\n                    }));\n                    // 加入資訊視窗\n                    dir_infowindows.push(new maps.InfoWindow({\n                      content: e.instructions\n                    }));\n                    // console.log(dir_markers.length, dir_infowindows.length, idx);\n                    // 加入地圖標記點擊事件\n                    dir_markers[idx].addListener('click', function () {\n                      if (dir_infowindows[idx].anchor) {\n                        dir_infowindows[idx].close();\n                      } else {\n                        dir_infowindows[idx].open(map, dir_markers[idx]);\n                      }\n                    });\n                  });\n                  // console.log(\"Steps\", steps);\n                  directionsDisplay.setDirections(response);\n                }\n                else {\n                  window.alert('Directions request failed due to ' + status);\n                }\n              }\n            )\n          }\n        }\n      })\n    })\n    this.props.socket.on(\"resetDirect\", (data) => {\n      console.log(\"Reset Route\", data)\n      this.resetDirection()\n      this.sendDirectInfo(null)\n    })\n  }\n\n  apiHasLoaded = (map, maps, places) => {\n    this.setState({\n      mapApiLoaded: true,\n      mapInstance: map,\n      mapApi: maps,\n    });\n    if (this.state.places.length > 0){\n      map.setCenter(new maps.LatLng(this.state.places[0].geometry.location.lat(), this.state.places[0].geometry.location.lng()));\n    }\n  };\n\n  addPlaceFromQuery = (place) => {\n    const { places, markers } = this.state\n    let findplace = places.findIndex(ele => {\n      return (ele.place_id === place.place_id) && (ele.fromSearch)\n    })\n    if (findplace === -1) {\n      place.show = true\n      places.push(place)\n    }\n    else {\n      console.log(\"Remove from search: \", findplace)\n      places.splice(findplace, 1);\n      place.show = false;\n      console.log(place)\n      places.push(place);\n    }\n    this.setState({ places: places });\n  };\n\n  // addPlace for Search\n  addPlace = (place) => {\n    const places = this.state.places\n    let findplace = places.findIndex(ele => {\n      return ele.place_id === place.place_id\n    })\n    if (findplace === -1) {\n      place.show = true\n      place.fromSearch = true\n      places.push(place)\n    }\n    else {\n      console.log(\"find exist: \", findplace)\n      places[findplace].show = true\n    }\n    this.setState({ places: places });\n  };\n\n  // onChildClick callback can take two arguments: key and childProps\n  onChildClickCallback = (key) => {\n    this.setState((state) => {\n      // console.log(state)\n      const index = state.places.findIndex(e => e.id === key);\n      // console.log(index)\n      // console.log(index)\n      if (index < 0) {\n        return;\n      }\n      this.state.mapInstance.setCenter(new this.state.mapApi.LatLng(state.places[index].geometry.location.lat(), state.places[index].geometry.location.lng()));\n      this.state.mapInstance.setZoom(15);\n      state.places[index].show = !state.places[index].show; // eslint-disable-line no-param-reassign\n      return { places: state.places };\n    });\n  };\n\n  sendDirectInfo = (details) => {\n    console.log(\"EMIT DETAILS\", details)\n    this.props.socket.emit(\"setRouteDetail\", details)\n  }\n\n  showMarker = (places) => {\n    const { mapInstance, mapApi } = this.state\n    if (!(mapApi && mapInstance)) return\n    // clear marker\n    markers.forEach(mark => {\n      mark.setMap(null);\n    })\n    markers = [];\n    console.log(\"MAP\", places)\n    places.forEach((place) => {\n      markers.push(new mapApi.Marker({\n        map: mapInstance,\n        position: {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        },\n      }));\n    });\n\n    markers.forEach((marker, i) => {\n      marker.addListener('click', () => {\n        console.log(\"Click\", i)\n        this.setState((state) => {\n          console.log(\"In Click\", state.places)\n\n          state.mapInstance.setCenter(new mapApi.LatLng(state.places[i].geometry.location.lat(), state.places[i].geometry.location.lng()));\n          state.mapInstance.setZoom(15);\n          state.places[i].show = !state.places[i].show; // eslint-disable-line no-param-reassign\n          return { places: state.places };\n        });\n      });\n    });\n  }\n\n  resetDirection = () => {\n    directions.forEach(dir => {\n      dir.setMap(null)\n    })\n    directions = []\n    dir_markers.forEach(dir => {\n      dir.setMap(null)\n    })\n    dir_markers = [];\n    dir_infowindows.forEach(dir => {\n      dir.setMap(null);\n    })\n    dir_infowindows = []\n  }\n\n  pickcenter = (place) => {\n    if (place){\n      console.log(\"NEW PLACE\")\n      return [place.geometry.location.lat(), place.geometry.location.lng()];\n    }\n    else{\n      console.log(\"OLD PLACE\")\n      return TAIPEI_NTU_CENTER;\n    }\n  }\n\n  render() {\n    const {\n      places, mapApiLoaded, mapInstance, mapApi,\n    } = this.state;\n    // this.showMarker(places, mapInstance, mapApi)\n    return (\n      <div id=\"right_map\">\n        {mapApiLoaded && (\n          <Search map={mapInstance} mapApi={mapApi} addplace={this.addPlace} />\n        )}\n        <GoogleMap\n          defaultZoom={12}\n          defaultCenter={this.pickcenter(places[0])}\n          bootstrapURLKeys={{\n            key: process.env.REACT_APP_MAP_KEY,\n            libraries: ['places', 'geometry'],\n          }}\n          // onChildClick={this.onChildClickCallback}\n          yesIWantToUseGoogleMapApiInternals\n          onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps, places)}\n        >\n          {this.showMarker(places)}\n          {!isEmpty(places) &&\n            places.map(place => (\n              <MarkerInfo\n                key={place.id}\n                lat={place.geometry.location.lat()}\n                lng={place.geometry.location.lng()}\n                show={place.show}\n                place={place}\n                user={this.props.user}\n              />\n            ))}\n        </GoogleMap>\n      </div>\n    );\n  }\n}\n\nexport default withApollo(Map);"]},"metadata":{},"sourceType":"module"}