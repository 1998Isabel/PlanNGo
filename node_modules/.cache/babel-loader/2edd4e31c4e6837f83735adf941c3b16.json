{"ast":null,"code":"import _objectSpread from \"/Users/isabel/Desktop/PlanNGo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/isabel/Desktop/PlanNGo/src/containers/schedule/Schedule.js\";\nimport React, { Component } from 'react';\nimport './../../App.css';\nimport RouteButton from './../../components/RouteButton';\nimport DayBox from './DayBox';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Element, scrollSpy, Events, Link, scroller } from 'react-scroll';\nimport { DAYS_INFO, ITEM_SUBSCRIPTION } from '../../graphql';\nimport { Query, Mutation } from 'react-apollo';\nimport { listToObjbyID } from '../../util';\nimport moment from 'moment';\n\nclass Schedule extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = (id, colid) => {\n      this.props.handleDelete(id, colid);\n    };\n\n    this.handleChange = (event, newValue) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.unsubscribe = null;\n    this.unsubscribe_date = null;\n    this.state = {\n      value: 0\n    };\n  }\n\n  scrollToWithContainer(day) {\n    let goToContainer = new Promise((resolve, reject) => {\n      Events.scrollEvent.register('end', () => {\n        resolve();\n        Events.scrollEvent.remove('end');\n      });\n      scroller.scrollTo(\"DayContainer\", {\n        duration: 0,\n        delay: 0,\n        smooth: 'easeInOutQuart'\n      });\n    });\n    goToContainer.then(() => scroller.scrollTo(day, {\n      duration: 800,\n      delay: 0,\n      smooth: 'easeInOutQuart',\n      containerId: \"DayContainerElement\",\n      offset: -200\n    }));\n  }\n\n  render() {\n    const userID = this.props.user;\n    return React.createElement(Query, {\n      query: DAYS_INFO,\n      variables: {\n        userID: userID\n      },\n      fetchPolicy: \"network-only\",\n      partialRefetch: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data,\n      subscribeToMore\n    }) => {\n      if (error) return React.createElement(\"div\", {\n        id: \"left_schedule\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"error\");\n      if (loading) return React.createElement(\"div\", {\n        id: \"left_schedule\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"loading...\");\n      const totalDays = data.users.totalDays;\n      const daysInfo = listToObjbyID(data.users.days); //string to date object\n\n      console.log(\"firstDay before!!!!!!\", data.users.firstDay);\n      const firstDay = data.users.firstDay.split(\"/\");\n      console.log(\"firstDay after!!!!!!\", firstDay);\n      const options = {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      var date_obj = new Date(Date.UTC(firstDay[0], parseInt(firstDay[1]) - 1, firstDay[2]));\n      console.log(\"date_obj\", date_obj);\n      console.log(totalDays);\n      let renderCols = totalDays.map((colId, index) => {\n        const column = daysInfo[colId];\n        const items = column.items;\n        const dayelement = \"DAY\" + (index + 1);\n        const date = moment(date_obj).add(index, 'days').toDate().toLocaleDateString('en-US', options);\n        console.log(\"schedule\", date);\n        return React.createElement(Element, {\n          key: column.id,\n          name: dayelement,\n          className: \"element\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(DayBox, {\n          socket: this.props.socket,\n          date: date,\n          user: userID,\n          key: column.id,\n          column: column,\n          items: items,\n          index: index + 1,\n          name: dayelement,\n          handleDelete: this.handleDelete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }));\n      });\n\n      if (!this.unsubscribe) {\n        this.unsubscribe = subscribeToMore({\n          document: ITEM_SUBSCRIPTION,\n          variables: {\n            userid: userID,\n            id: userID\n          },\n          updateQuery: (prev, {\n            subscriptionData\n          }) => {\n            if (!subscriptionData.data) return prev;\n            const newDays = subscriptionData.data.item.data.days;\n            const newtotalDays = subscriptionData.data.item.data.totalDays;\n            const newfirstDay = subscriptionData.data.item.data.firstDay; // console.log(\"YAAAAAAAAAAAAAA\")\n\n            prev.users.days = newDays;\n            prev.users.totalDays = newtotalDays;\n            prev.users.firstDay = newfirstDay;\n            return _objectSpread({}, prev, {\n              days: newDays,\n              totalDays: newtotalDays,\n              firstDay: newfirstDay\n            });\n          }\n        });\n      }\n\n      let scrolllink = () => {\n        return React.createElement(AppBar, {\n          position: \"static\",\n          color: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(Tabs, {\n          value: this.state.value,\n          onChange: this.handleChange,\n          indicatorColor: \"primary\",\n          textColor: \"primary\",\n          variant: \"scrollable\",\n          scrollButtons: \"auto\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, totalDays.map((colId, index) => {\n          const column = daysInfo[colId];\n          const dayelement = \"DAY\" + (index + 1);\n          return React.createElement(Tab, {\n            key: column.id,\n            label: dayelement,\n            value: index,\n            style: {\n              padding: 4,\n              width: 80,\n              minWidth: 80\n            },\n            onClick: () => this.scrollToWithContainer(dayelement),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          });\n        })));\n      };\n\n      return React.createElement(\"div\", {\n        id: \"left_schedule\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, scrolllink()), React.createElement(Element, {\n        name: \"DayContainer\",\n        className: \"element day-fixed-size\",\n        id: \"DayContainerElement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(List, {\n        className: \"schedule-root\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, renderCols)));\n    });\n  }\n\n}\n\nexport default Schedule;","map":{"version":3,"sources":["/Users/isabel/Desktop/PlanNGo/src/containers/schedule/Schedule.js"],"names":["React","Component","RouteButton","DayBox","List","Typography","AppBar","Tabs","Tab","Element","scrollSpy","Events","Link","scroller","DAYS_INFO","ITEM_SUBSCRIPTION","Query","Mutation","listToObjbyID","moment","Schedule","constructor","props","handleDelete","id","colid","handleChange","event","newValue","setState","value","unsubscribe","unsubscribe_date","state","scrollToWithContainer","day","goToContainer","Promise","resolve","reject","scrollEvent","register","remove","scrollTo","duration","delay","smooth","then","containerId","offset","render","userID","user","loading","error","data","subscribeToMore","totalDays","users","daysInfo","days","console","log","firstDay","split","options","weekday","year","month","date_obj","Date","UTC","parseInt","renderCols","map","colId","index","column","items","dayelement","date","add","toDate","toLocaleDateString","socket","document","variables","userid","updateQuery","prev","subscriptionData","newDays","item","newtotalDays","newfirstDay","scrolllink","padding","width","minWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './../../App.css';\nimport RouteButton from './../../components/RouteButton'\nimport DayBox from './DayBox'\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Element, scrollSpy, Events, Link, scroller  } from 'react-scroll';\nimport { DAYS_INFO , ITEM_SUBSCRIPTION } from '../../graphql'\nimport { Query, Mutation } from 'react-apollo'\nimport {listToObjbyID} from '../../util'\nimport moment from 'moment';\n\nclass Schedule extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    }\n  }\n  handleDelete = (id, colid) => {\n    this.props.handleDelete(id, colid)\n  }\n  handleChange = (event, newValue) => {\n    this.setState({value: newValue})\n  }\n  scrollToWithContainer(day) {\n    let goToContainer = new Promise((resolve, reject) => {\n      Events.scrollEvent.register('end', () => {\n        resolve();\n        Events.scrollEvent.remove('end');\n      });\n      scroller.scrollTo(\"DayContainer\", {\n        duration: 0,\n        delay: 0,\n        smooth: 'easeInOutQuart'\n      });\n    });\n\n    goToContainer.then(() =>  \n      scroller.scrollTo(day, {\n        duration: 800,\n        delay: 0,\n        smooth: 'easeInOutQuart',\n        containerId: \"DayContainerElement\",\n        offset: -200,\n      }));\n  }\n  \n\n  unsubscribe = null\n  unsubscribe_date = null\n\n  render() {\n    const userID = this.props.user\n    return (<Query query={DAYS_INFO} variables={{userID: userID}} fetchPolicy='network-only' partialRefetch={true}>{\n      ({loading, error, data, subscribeToMore}) => {\n        if(error) return <div id=\"left_schedule\">error</div>\n        if(loading) return <div id=\"left_schedule\">loading...</div>\n  \n        const totalDays = data.users.totalDays;\n        const daysInfo = listToObjbyID(data.users.days);\n        //string to date object\n        console.log(\"firstDay before!!!!!!\",data.users.firstDay)\n        const firstDay = data.users.firstDay.split(\"/\");\n        console.log(\"firstDay after!!!!!!\",firstDay)\n        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n        var date_obj = new Date(Date.UTC(firstDay[0], parseInt(firstDay[1])-1, firstDay[2]));\n        console.log(\"date_obj\",date_obj)\n\n        console.log(totalDays)\n        let renderCols = totalDays.map((colId, index) => {\n          const column = daysInfo[colId];\n          const items = column.items\n          const dayelement = \"DAY\" + (index + 1)\n          const date = moment(date_obj).add(index, 'days').toDate().toLocaleDateString('en-US', options);\n          console.log(\"schedule\", date)\n          return (\n            <Element key={column.id} name={dayelement} className=\"element\">\n              <DayBox socket={this.props.socket} date={date} user={userID} key={column.id} column={column} items={items} index={index + 1} name={dayelement} handleDelete={this.handleDelete} />\n            </Element>\n          );\n        })\n    \n        if (!this.unsubscribe) {\n          this.unsubscribe = \n            subscribeToMore({\n              document:  ITEM_SUBSCRIPTION,\n              variables: { userid: userID, id: userID },\n              updateQuery: (prev, { subscriptionData }) => {\n                \n                if (!subscriptionData.data) return prev\n                const newDays = subscriptionData.data.item.data.days;\n                const newtotalDays = subscriptionData.data.item.data.totalDays;\n                const newfirstDay = subscriptionData.data.item.data.firstDay; \n                // console.log(\"YAAAAAAAAAAAAAA\")\n                prev.users.days = newDays;\n                prev.users.totalDays = newtotalDays;\n                prev.users.firstDay = newfirstDay;\n                \n                return {\n                  ...prev,\n                  days: newDays,\n                  totalDays: newtotalDays,\n                  firstDay: newfirstDay\n                }\n            }})\n        }\n        let scrolllink = () => {\n          return (\n            <AppBar position=\"static\" color=\"default\">\n              <Tabs\n                value={this.state.value}\n                onChange={this.handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n              >\n                {totalDays.map((colId, index) => {\n                  const column = daysInfo[colId];\n                  const dayelement = \"DAY\" + (index + 1)\n\n                  return (\n                    <Tab key={column.id} label={dayelement} value={index} style={{ padding: 4, width: 80, minWidth: 80 }} onClick={() => this.scrollToWithContainer(dayelement)}>\n                      {/* <Link key={column.id} to={dayelement} spy={true} smooth={true} duration={250} containerId=\"DayContainerElement\">\n                      </Link> */}\n                      {/* <a onClick={() => this.scrollTo()} ></a> */}\n                    </Tab>\n                  );\n                })}\n              </Tabs>\n            </AppBar>\n          )\n        }\n        return (\n          <div id=\"left_schedule\">\n            <div>\n              {/* <Typography variant=\"h5\" gutterBottom style={{ marginLeft: '10px', marginTop: '10px' }}>\n                Schedule\n              </Typography> */}\n              {scrolllink()}\n            </div>\n    \n            <Element name=\"DayContainer\" className=\"element day-fixed-size\" id=\"DayContainerElement\">\n              <List className=\"schedule-root\">\n                {renderCols}\n              </List>\n            </Element>\n          </div>\n        );\n      }\n    }\n    </Query>);\n  }\n}\n\nexport default Schedule;"]},"metadata":{},"sourceType":"module"}